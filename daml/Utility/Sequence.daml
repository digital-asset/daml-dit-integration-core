-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- SPDX-License-Identifier: Apache-2.0

module Utility.Sequence where


template Sequence
  with
    owner : Party
    name  : Text
    count : Int
  where
    signatory owner

    key (owner, name) : (Party, Text)
    maintainer key._1

    controller owner can
        Sequence_Next : ContractId Sequence
           do
             create this with
               count = count + 1

getNextSequenceValue : Party -> Text -> Update Int
getNextSequenceValue owner name =
  do
    oSeqCid <- lookupByKey @Sequence (owner, name)
    case oSeqCid of
      Some seqCid -> do
        newCid <- exercise seqCid Sequence_Next
        seq <- fetch @Sequence newCid
        return seq.count
      None -> do
        create Sequence
          with
            count = 0
            ..
        return 0


template SequenceGenerator
  with
    owner : Party
    prefix : Text
    offset : Int
    defaultBlockSize : Int
    countLimit : Optional Int
  where
    signatory owner

    key (owner, prefix) : (Party, Text)
    maintainer key._1

    controller owner can
        SequenceGenerator_CreateBlock : ([(ContractId Sequence)], (ContractId SequenceGenerator))
          with
            blockSizeRequest : Int
          do
            assert (blockSizeRequest >= 0)

            blockSize <- case countLimit of
              Some limit -> return (min (limit - offset) blockSizeRequest)
              None -> return blockSizeRequest

            seqCids <- forA [0..blockSize-1] (\ii -> create Sequence with
               owner
               name=prefix <> (show (ii + offset))
               count=0)

            genCid <- create SequenceGenerator with
              offset=offset+blockSize
              ..

            return (seqCids, genCid)

        nonconsuming SequenceGenerator_CreateDefaultBlock : ([(ContractId Sequence)], (ContractId SequenceGenerator))
          do
            exercise self SequenceGenerator_CreateBlock with
              blockSizeRequest=defaultBlockSize


initial_create = scenario do
  alice <- getParty "alice"

  submit alice do
    val <- getNextSequenceValue alice "default"

    assert (val == 0)

fetch_after_create = scenario do
  alice <- getParty "alice"

  submit alice do
    getNextSequenceValue alice "default"
    val <- getNextSequenceValue alice "default"

    assert (val == 1)

two_sequences = scenario do
  alice <- getParty "alice"

  submit alice do
    getNextSequenceValue alice "default"
    val <- getNextSequenceValue alice "second"

    assert (val == 0)

bulk_create = scenario do
  alice <- getParty "alice"

  gen <- submit alice do
    create SequenceGenerator with
              owner=alice
              prefix="prefix"
              offset=0
              defaultBlockSize=5
              countLimit = None

  submit alice do
    (seqCids, _) <- exercise gen SequenceGenerator_CreateBlock
      with
        blockSizeRequest = 10

    assert (length seqCids == 10)

bulk_default_create = scenario do
  alice <- getParty "alice"

  gen <- submit alice do
    create SequenceGenerator with
              owner=alice
              prefix="prefix"
              offset=0
              defaultBlockSize=5
              countLimit = None

  submit alice do
    (seqCids, _) <- exercise gen SequenceGenerator_CreateDefaultBlock

    assert (length seqCids == 5)

limited_partial_bulk_default_create = scenario do
  alice <- getParty "alice"

  gen <- submit alice do
    create SequenceGenerator with
              owner=alice
              prefix="prefix"
              offset=0
              defaultBlockSize=5
              countLimit = Some(2)

  submit alice do
    (seqCids, _) <- exercise gen SequenceGenerator_CreateDefaultBlock

    assert (length seqCids == 2)

limited_complete_bulk_default_create = scenario do
  alice <- getParty "alice"

  gen <- submit alice do
    create SequenceGenerator with
              owner=alice
              prefix="prefix"
              offset=0
              defaultBlockSize=5
              countLimit = Some(10)

  submit alice do
    (seqCids, _) <- exercise gen SequenceGenerator_CreateDefaultBlock

    assert (length seqCids == 5)

limited_complete_then_partial_bulk_default_create = scenario do
  alice <- getParty "alice"

  gen <- submit alice do
    create SequenceGenerator with
              owner=alice
              prefix="prefix"
              offset=0
              defaultBlockSize=5
              countLimit = Some(7)

  gen2 <- submit alice do
    (seqCids, genCid) <- exercise gen SequenceGenerator_CreateDefaultBlock

    assert (length seqCids == 5)

    return genCid

  submit alice do
    (seqCids, _) <- exercise gen2 SequenceGenerator_CreateDefaultBlock

    assert (length seqCids == 2)
