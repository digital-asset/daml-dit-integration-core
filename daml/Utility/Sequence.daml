-- Copyright (c) 2020, Digital Asset (Switzerland) GmbH and/or its affiliates.
-- SPDX-License-Identifier: Apache-2.0

module Utility.Sequence where

template Sequence
  with
    owner : Party
    name  : Text
    count : Int
  where
    signatory owner

    key (owner, name) : (Party, Text)
    maintainer key._1

    controller owner can
        Sequence_Next : ContractId Sequence
           do
             create this with
               count = count + 1

getNextSequenceValue : Party -> Text -> Update Int
getNextSequenceValue owner name =
  do
    oSeqCid <- lookupByKey @Sequence (owner, name)
    case oSeqCid of
      Some seqCid -> do
        newCid <- exercise seqCid Sequence_Next
        seq <- fetch @Sequence newCid
        return seq.count
      None -> do
        create Sequence
          with
            count = 0
            ..
        return 0


template SequenceGenerator
  with
    owner : Party
    prefix : Text
    offset: Int
  where
    signatory owner

    key (owner, prefix) : (Party, Text)
    maintainer key._1

    controller owner can
        SequenceGenerator_BulkCreate : [ContractId Sequence]
          with 
            count: Int
          do
            assert (count >= 0)

            create SequenceGenerator with
              offset=offset+count
              ..

            forA [0..count-1] (\ii -> create Sequence with 
               owner
               name=prefix <> (show (ii + offset))
               count=0)

initial_create = scenario do
  alice <- getParty "alice"

  submit alice do
    val <- getNextSequenceValue alice "default"

    assert (val == 0)

fetch_after_create = scenario do
  alice <- getParty "alice"

  submit alice do
    getNextSequenceValue alice "default"
    val <- getNextSequenceValue alice "default"

    assert (val == 1)

two_sequences = scenario do
  alice <- getParty "alice"

  submit alice do
    getNextSequenceValue alice "default"
    val <- getNextSequenceValue alice "second"

    assert (val == 0)

bulk_create = scenario do
  alice <- getParty "alice"

  submit alice do
    gen <- create SequenceGenerator with 
              owner=alice
              prefix="prefix"
              offset=0

    cids <- exercise gen SequenceGenerator_BulkCreate with
      count=5

    assert (length cids == 5)
